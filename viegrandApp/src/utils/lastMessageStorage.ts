import AsyncStorage from '@react-native-async-storage/async-storage';

export interface LastMessage {
  conversationId: string;
  messageText: string;
  senderPhone: string;
  receiverPhone: string;
  sentAt: string;
  senderName: string;
  isOwnMessage: boolean;
}

const LAST_MESSAGES_KEY = 'last_messages_cache';

export const lastMessageStorage = {
  // L∆∞u tin nh·∫Øn cu·ªëi c√πng cho m·ªôt cu·ªôc h·ªôi tho·∫°i
  async saveLastMessage(lastMessage: LastMessage): Promise<void> {
    try {
      const existingData = await AsyncStorage.getItem(LAST_MESSAGES_KEY);
      const lastMessages: Record<string, LastMessage> = existingData ? JSON.parse(existingData) : {};
      
      // L∆∞u tin nh·∫Øn cu·ªëi c√πng v·ªõi key l√† conversationId
      lastMessages[lastMessage.conversationId] = lastMessage;
      
      await AsyncStorage.setItem(LAST_MESSAGES_KEY, JSON.stringify(lastMessages));
      console.log('üíæ ƒê√£ l∆∞u tin nh·∫Øn cu·ªëi c√πng:', {
        conversationId: lastMessage.conversationId,
        message: lastMessage.messageText.substring(0, 50) + '...'
      });
    } catch (error) {
      console.error('‚ùå L·ªói khi l∆∞u tin nh·∫Øn cu·ªëi c√πng:', error);
    }
  },

  // L·∫•y tin nh·∫Øn cu·ªëi c√πng cho m·ªôt cu·ªôc h·ªôi tho·∫°i
  async getLastMessage(conversationId: string): Promise<LastMessage | null> {
    try {
      const existingData = await AsyncStorage.getItem(LAST_MESSAGES_KEY);
      if (!existingData) return null;
      
      const lastMessages: Record<string, LastMessage> = JSON.parse(existingData);
      const lastMessage = lastMessages[conversationId];
      
      if (lastMessage) {
        console.log('üìñ ƒê√£ l·∫•y tin nh·∫Øn cu·ªëi c√πng:', {
          conversationId,
          message: lastMessage.messageText.substring(0, 50) + '...'
        });
      }
      
      return lastMessage || null;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y tin nh·∫Øn cu·ªëi c√πng:', error);
      return null;
    }
  },

  // L·∫•y t·∫•t c·∫£ tin nh·∫Øn cu·ªëi c√πng
  async getAllLastMessages(): Promise<Record<string, LastMessage>> {
    try {
      const existingData = await AsyncStorage.getItem(LAST_MESSAGES_KEY);
      return existingData ? JSON.parse(existingData) : {};
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ tin nh·∫Øn cu·ªëi c√πng:', error);
      return {};
    }
  },

  // X√≥a tin nh·∫Øn cu·ªëi c√πng cho m·ªôt cu·ªôc h·ªôi tho·∫°i
  async removeLastMessage(conversationId: string): Promise<void> {
    try {
      const existingData = await AsyncStorage.getItem(LAST_MESSAGES_KEY);
      if (!existingData) return;
      
      const lastMessages: Record<string, LastMessage> = JSON.parse(existingData);
      delete lastMessages[conversationId];
      
      await AsyncStorage.setItem(LAST_MESSAGES_KEY, JSON.stringify(lastMessages));
      console.log('üóëÔ∏è ƒê√£ x√≥a tin nh·∫Øn cu·ªëi c√πng cho conversation:', conversationId);
    } catch (error) {
      console.error('‚ùå L·ªói khi x√≥a tin nh·∫Øn cu·ªëi c√πng:', error);
    }
  },

  // X√≥a t·∫•t c·∫£ tin nh·∫Øn cu·ªëi c√πng
  async clearAllLastMessages(): Promise<void> {
    try {
      await AsyncStorage.removeItem(LAST_MESSAGES_KEY);
      console.log('üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ tin nh·∫Øn cu·ªëi c√πng');
    } catch (error) {
      console.error('‚ùå L·ªói khi x√≥a t·∫•t c·∫£ tin nh·∫Øn cu·ªëi c√πng:', error);
    }
  }
}; 